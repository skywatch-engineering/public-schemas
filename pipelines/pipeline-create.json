{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://raw.githubusercontent.com/skywatch-engineering/public-schemas/master/pipelines/pipeline-create.json",
    "type": "object",
    "required": [
        "start_date",
        "interval",
        "output"
    ],
    "additionalProperties": false,
    "properties": {
        "name": {
            "type": "string",
            "minLength": 1
        },
        "start_date": {
            "type": "string",
            "format": "date"
        },
        "end_date": {
            "$comment": "App must set default based on start_date",
            "type": "string",
            "format": "date"
        },
        "budget_per_km2": {
            "type": "number",
            "minimum": 0,
            "default": 0
        },
        "resolution_low": {
            "type": "number",
            "minimum": 0.4,
            "maximum": 30,
            "default": 30
        },
        "resolution_high": {
            "$comment": "Application must validate resolution_low > resolution_high",
            "type": "number",
            "minimum": 0.4,
            "maximum": 30,
            "default": 10
        },
        "cloud_cover_percentage": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "default": 100
        },
        "interval": {
            "type": "string",
            "pattern": "[1-9]\\d{0,2}d"
        },
        "delivery": {
            "oneOf": [
                {
                    "type": "object",
                    "properties": {
                        "wait_interval": {
                            "type": "string",
                            "pattern": "\\d{1,3}d",
                            "default": "3d"
                        },
                        "interval_results_priorities": {
                            "type": "array",
                            "$comment": "make sure to check in app side for conflicting enums",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "lowest_cost",
                                    "highest_resolution",
                                    "highest_cloud_cover",
                                    "most_recent",
                                    "interval_median",
                                    "least_recent"
                                ]
                            },
                            "uniqueItems": true,
                            "minItems": 0,
                            "default": [
                                "most_recent",
                                "highest_cloud_cover",
                                "highest_resolution",
                                "lowest_cost"
                            ]
                        }
                    }
                },
                {
                    "type": "string",
                    "enum": [
                        "first_available"
                    ]
                }
            ]
        },
        "aoi": {
            "$ref": "supported-geojson-geometry.json"
        },
        "output": {
            "type": "object",
            "required": [
                "id"
            ],
            "additionalProperties": false,
            "properties": {
                "id": {
                    "type": "string",
                    "minLength": 1
                },
                "format": {
                    "type": "string",
                    "enum": [
                        "geotiff",
                        "jp2"
                    ],
                    "default": "geotiff"
                }
            }
        },
        "tags": {
            "type": "array",
            "items": {
                "type": "object",
                "required": [
                    "label",
                    "value"
                ],
                "additionalProperties": false,
                "properties": {
                    "label": {
                        "type": "string",
                        "minLength": 1
                    },
                    "value": {
                        "type": "string",
                        "minLength": 1
                    }
                }
            }
        },
        "status": {
            "$comment": "status.default = inactive if not aoi else active; throws an error if status = active and not aoi",
            "type": "string",
            "enum": [
                "active",
                "inactive"
            ],
            "default": "active"
        }
    }
}
